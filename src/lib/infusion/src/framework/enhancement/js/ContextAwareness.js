var fluid_2_0_0=fluid_2_0_0||{};!function($,fluid){"use strict";fluid.registerNamespace("fluid.contextAware"),fluid.defaults("fluid.contextAware.marker",{gradeNames:["fluid.component"]}),fluid.contextAware.makeCheckMarkers=function(checks,path,instantiator){fluid.each(checks,function(value,markerTypeName){fluid.constructSingle(path,{type:markerTypeName,gradeNames:"fluid.contextAware.marker",value:value},instantiator)})},fluid.contextAware.performChecks=function(checkHash){return fluid.transform(checkHash,function(checkRecord){return"function"==typeof checkRecord?checkRecord={func:checkRecord}:"string"==typeof checkRecord&&(checkRecord={funcName:checkRecord}),fluid.isPrimitive(checkRecord)?checkRecord:"value"in checkRecord?checkRecord.value:"func"in checkRecord?checkRecord.func():"funcName"in checkRecord?fluid.invokeGlobalFunction(checkRecord.funcName):void fluid.fail("Error in contextAwareness check record ",checkRecord," - must contain an entry with name value, func, or funcName")})},fluid.contextAware.makeChecks=function(checkHash,path,instantiator){var checkOptions=fluid.contextAware.performChecks(checkHash);fluid.contextAware.makeCheckMarkers(checkOptions,path,instantiator)},fluid.contextAware.forgetChecks=function(markerNames,path,instantiator){instantiator=instantiator||fluid.globalInstantiator,path=path||[];var markerArray=fluid.makeArray(markerNames);fluid.each(markerArray,function(markerName){var memberName=fluid.typeNameToMemberName(markerName),segs=fluid.model.parseToSegments(path,instantiator.parseEL,!0);segs.push(memberName),fluid.destroy(segs,instantiator)})},fluid.defaults("fluid.contextAware",{gradeNames:["{that}.check"],mergePolicy:{contextAwareness:"noexpand"},contextAwareness:{},invokers:{check:{funcName:"fluid.contextAware.check",args:["{that}","{that}.options.contextAwareness"]}}}),fluid.contextAware.getCheckValue=function(that,reference){var targetRef=fluid.parseContextReference(reference),targetComponent=fluid.resolveContext(targetRef.context,that),path=targetRef.path||["options","value"],value=fluid.getForComponent(targetComponent,path);return value},fluid.contextAware.checkOne=function(that,contextAwareRecord){contextAwareRecord.checks&&contextAwareRecord.checks.contextValue&&fluid.fail("Nesting error in contextAwareness record ",contextAwareRecord,' - the "checks" entry must contain a hash and not a contextValue/gradeNames record at top level');var checkList=fluid.parsePriorityRecords(contextAwareRecord.checks,"contextAwareness checkRecord");return fluid.find(checkList,function(check){check.contextValue||fluid.fail("Cannot perform check for contextAwareness record ",check,' without a valid field named "contextValue"');var value=fluid.contextAware.getCheckValue(that,check.contextValue);return(void 0===check.equals?value:value===check.equals)?check.gradeNames:void 0},contextAwareRecord.defaultGradeNames)},fluid.contextAware.check=function(that,contextAwarenessOptions){var gradeNames=[],contextAwareList=fluid.parsePriorityRecords(contextAwarenessOptions,"contextAwareness adaptationRecord");return fluid.each(contextAwareList,function(record){var matched=fluid.contextAware.checkOne(that,record);gradeNames=gradeNames.concat(fluid.makeArray(matched))}),gradeNames},fluid.contextAware.makeAdaptation=function(options){fluid.expect("fluid.contextAware.makeAdaptation",options,["distributionName","targetName","adaptationName","checkName","record"]),fluid.defaults(options.distributionName,{gradeNames:["fluid.component"],distributeOptions:{target:"{/ "+options.targetName+"}.options.contextAwareness."+options.adaptationName+".checks."+options.checkName,record:options.record}}),fluid.constructSingle([],options.distributionName)},fluid.contextAware.isBrowser=function(){return"undefined"!=typeof window&&window.document},fluid.contextAware.makeChecks({"fluid.browser":{funcName:"fluid.contextAware.isBrowser"}})}(jQuery,fluid_2_0_0);