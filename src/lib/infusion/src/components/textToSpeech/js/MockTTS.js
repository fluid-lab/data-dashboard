!function(){"use strict";fluid.defaults("fluid.mock.textToSpeech",{gradeNames:["fluid.textToSpeech"],members:{speechRecord:[],eventRecord:{}},listeners:{"onStart.recordEvent":{listener:"{that}.recordEvent",args:["onStart"]},"onStop.recordEvent":{listener:"{that}.recordEvent",args:["onStop"]},"onSpeechQueued.recordEvent":{listener:"{that}.recordEvent",args:["onSpeechQueued"]}},invokers:{queueSpeech:{funcName:"fluid.mock.textToSpeech.queueSpeech",args:["{that}","{that}.handleStart","{that}.handleEnd","{that}.speechRecord","{arguments}.0","{arguments}.1","{arguments}.2"]},cancel:{funcName:"fluid.mock.textToSpeech.cancel",args:["{that}","{that}.handleEnd"]},pause:{"this":null,method:null,func:"{that}.events.onPause.fire"},resume:{"this":null,method:null,func:"{that}.events.onResume.fire"},getVoices:{"this":null,method:null,funcName:"fluid.identity",args:[]},recordEvent:{funcName:"fluid.mock.textToSpeech.recordEvent",args:["{that}.eventRecord","{arguments}.0"]}}}),fluid.mock.textToSpeech.queueSpeech=function(that,handleStart,handleEnd,speechRecord,text,interrupt,options){interrupt&&that.cancel();var record={text:text,interrupt:!!interrupt};options&&(record.options=options),speechRecord.push(record),that.queue.push(text),that.events.onSpeechQueued.fire(text),handleStart(),setTimeout(handleEnd,0)},fluid.mock.textToSpeech.cancel=function(that,handleEnd){that.queue=[],handleEnd()},fluid.mock.textToSpeech.recordEvent=function(eventRecord,name){eventRecord[name]=(eventRecord[name]||0)+1}}();